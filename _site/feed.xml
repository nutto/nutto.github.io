<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nutto的穿梭机</title>
    <atom:link href="http://blog.nuttopan.cn/feed.xml" rel="self" type="application/rss+xml"/>
    <link>http://blog.nuttopan.cn/</link>
    <description>nutto的博客</description>
    <pubDate>Mon, 02 May 2016 12:12:21 +0800</pubDate>
    
      <item>
        <title>【PHP-FIG】系列-PSR2编码规范</title>
        <link>http://blog.nuttopan.cn/blog/psr-2/</link>
        <guid isPermaLink="true">http://blog.nuttopan.cn/blog/psr-2/</guid>
        <description>&lt;p&gt;这个规范是&lt;a href=&quot;http://www.php-fig.org/psr/psr-1/&quot;&gt;PSR-1&lt;/a&gt;的延伸,扩展了更多编码规范上的细节.&lt;/p&gt;

&lt;p&gt;这个规范通过枚举一些规则来说明如何书写代码能让他人阅读代码的时候的认知摩擦会更少.&lt;/p&gt;

&lt;h2&gt;概述&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;必须遵循&lt;a href=&quot;http://www.php-fig.org/psr/psr-1/&quot;&gt;PSR-1&lt;/a&gt;的规范&lt;/li&gt;
&lt;li&gt;代码缩进必须使用4个空格而不是 &lt;code&gt;tab&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;虽然没有硬性的每行长度限制,但是我们必须遵循不少于120个字符的软性规定,最好是可以控制在80个字符每行&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;namespace&lt;/code&gt; 声明后,必须留一个空行,而 &lt;code&gt;use&lt;/code&gt; 语句后也必须留一个空行&lt;/li&gt;
&lt;li&gt; &lt;code&gt;class&lt;/code&gt; 定义中的 &lt;code&gt;{&lt;/code&gt; 必须放在下一行,而 &lt;code&gt;}&lt;/code&gt; 也必须放在所有定义语句的下一行
比如:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;class Food&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    // 所有定义语句&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt; &lt;code&gt;method&lt;/code&gt; 定义中的 &lt;code&gt;{&lt;/code&gt; 必须放在下一行,而 &lt;code&gt;}&lt;/code&gt; 也必须放在所有定义语句的下一行
比如:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;function eat($food)&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    // 所有定义语句&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;所有的属性和方法都应该声明可见性, &lt;code&gt;abstract&lt;/code&gt; 和 &lt;code&gt;final&lt;/code&gt; 必须声明在可见性的前面, &lt;code&gt;static&lt;/code&gt; 必须声明在可见性的后面
比如:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;class Foo&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    privatefunction sampleFunction()&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    {&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        // do some actions&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    }&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    final public static function sampleFunction2()&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    {&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;        // do some actions&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    }&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;控制语句的关键词后面必须紧跟一个空格,而方法和函数就一定不能加空格
比如:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;if (1 == true) {&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    // do some actions&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;x&quot;&gt;function sampleFunction($a, $b)&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;    // do some actions&lt;/span&gt;
&lt;span class=&quot;x&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;控制语句的开括号 &lt;code&gt;{&lt;/code&gt; 后面不能跟空格,闭括号 &lt;code&gt;}&lt;/code&gt; 前面也不能跟空格&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;例子&lt;/h3&gt;

&lt;p&gt;例子参考:&lt;a href=&quot;http://www.php-fig.org/psr/psr-2/#1-1-example&quot;&gt;PSR-2 1.1 Example&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;一般性规范&lt;/h2&gt;

&lt;h3&gt;基本编码规范&lt;/h3&gt;

&lt;p&gt;基本编码规范必须遵循&lt;a href=&quot;http://www.php-fig.org/psr/psr-1/&quot;&gt;PSR-1&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;PHP文件&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;所有的PHP文件都必须以Unix LF(linefeed)作为行的结尾&lt;/li&gt;
&lt;li&gt;所有的PHP文件都必须以一个空行作为文件的结束&lt;/li&gt;
&lt;li&gt;如果文件中只包含PHP的话必须忽略PHP的闭标签 &lt;code&gt;?&amp;gt;&lt;/code&gt; &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;PHP的行&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;没有硬性的行长度要求&lt;/li&gt;
&lt;li&gt;但是行长度务必控制在120字符以内,最好是可以控制在80字符以内,长于这个长度的行应该被分开成多个不长于80字符的子行
非空行的结尾不能带有空格&lt;/li&gt;
&lt;li&gt;空行应该用来区分关联的代码块,并让代码的可读性提高&lt;/li&gt;
&lt;li&gt;一行必须只包含一个表达式&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;缩进&lt;/h3&gt;

&lt;p&gt;缩进应该由4个空格作为一个单元,绝对不能使用 &lt;code&gt;tab&lt;/code&gt; 作为缩进&lt;/p&gt;

&lt;h3&gt;关于True/False/Null&lt;/h3&gt;

&lt;p&gt;PHP的关键字必须使用小写&lt;/p&gt;

&lt;p&gt;所以 &lt;code&gt;true&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; , &lt;code&gt;null&lt;/code&gt; 都必须使用小写&lt;/p&gt;

&lt;p&gt;比如:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vendor\Package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FooClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BarClass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OtherVendor\OtherPackage\BazClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ... additional PHP code ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;&lt;code&gt;namespace&lt;/code&gt; 和 &lt;code&gt;use&lt;/code&gt; 声明&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt; &lt;code&gt;namespace&lt;/code&gt; 语句一定要紧接着一个空行&lt;/li&gt;
&lt;li&gt; &lt;code&gt;use&lt;/code&gt; 要在 &lt;code&gt;namespace&lt;/code&gt; 语句后面&lt;/li&gt;
&lt;li&gt;一行只能有一个 &lt;code&gt;use&lt;/code&gt; 语句&lt;/li&gt;
&lt;li&gt; &lt;code&gt;use&lt;/code&gt; 语句块之后一定要紧接一个空行
比如:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vendor\Package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FooClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BarClass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OtherVendor\OtherPackage\BazClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// ... additional PHP code ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;类,属性和方法&lt;/h3&gt;

&lt;p&gt;这里的&amp;#39;类&amp;#39;指的是所有的类(classes),接口(interfaces)和特性(traits)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;继承和接口&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;extends&lt;/code&gt; 和 &lt;code&gt;implements&lt;/code&gt; 必须在同一行声明&lt;/p&gt;

&lt;p&gt;开括号 &lt;code&gt;{&lt;/code&gt; 必须写在新的一行,闭括号 &lt;code&gt;}&lt;/code&gt; 也应该写在类体后新的一行
比如:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vendor\Package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FooClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BarClass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OtherVendor\OtherPackage\BazClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassName&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ParentClass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\ArrayAccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;\Countable&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// constants, properties, methods&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用 &lt;code&gt;implements&lt;/code&gt; 进行多个接口扩展的时候,应该把接口列表分成多行,每行都应该要有一个单位的缩进
比如:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vendor\Package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FooClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BarClass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;OtherVendor\OtherPackage\BazClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassName&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ParentClass&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;implements&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;\ArrayAccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;\Countable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;\Serializable&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// constants, properties, methods&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;属性&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所有类中的属性都必须声明可见性&lt;/p&gt;

&lt;p&gt;不要用 &lt;code&gt;var&lt;/code&gt; 作为属性名&lt;/p&gt;

&lt;p&gt;一行只能有一个属性的声明&lt;/p&gt;

&lt;p&gt;不应该使用下横线前缀来暗示属性是 &lt;code&gt;protected&lt;/code&gt; 或者是 &lt;code&gt;provate&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;举个属性声明的例子:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vendor\Package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassName&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;方法&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所有的方法都必须声明可见性&lt;/p&gt;

&lt;p&gt;不应该使用下横线前缀来暗示方法是 &lt;code&gt;protected&lt;/code&gt; 或者是 &lt;code&gt;provate&lt;/code&gt; &lt;/p&gt;

&lt;p&gt;声明方法的时候不能在方法名后加上空格,开括号 &lt;code&gt;{&lt;/code&gt; 必须另起一行, &lt;code&gt;}&lt;/code&gt; 闭括号也必须另起一行,开括号和闭括号后面都不要加上空格&lt;/p&gt;

&lt;p&gt;举个方法声明的例子:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vendor\Package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassName&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fooBarBaz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$arg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$arg2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$arg3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// method body&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;方法参数&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在方法参数列表中的每个逗号前不要加空格,逗号后加上一个空格&lt;/p&gt;

&lt;p&gt;有默认值的参数一定要写在无默认值参数的后面
举个例子:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vendor\Package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassName&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$arg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$arg2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$arg3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// method body&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数列表可以分成多行来书写,每行都要有一个单位的缩进,一个只能有一个参数&lt;/p&gt;

&lt;p&gt;当参数列表分成多行.闭小括号和开大括号要写在同一行,并用一个空格隔开&lt;/p&gt;

&lt;p&gt;举个参数列表的例子:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vendor\Package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassName&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;aVeryLongMethodName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;ClassTypeHint&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$arg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$arg2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$arg3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// method body&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;abstract,final和static&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;abstract&lt;/code&gt; 和 &lt;code&gt;final&lt;/code&gt; 声明必须在可见性声明之前&lt;/p&gt;

&lt;p&gt;而 &lt;code&gt;static&lt;/code&gt; 声明必须在可见性声明之后&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Vendor\Package&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClassName&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;zim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// method body&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;方法和函数的调用&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在方法和函数调用的时候一定不能在函数名和括号之间有空格,在开括号 &lt;code&gt;(&lt;/code&gt; 之后和闭括号 &lt;code&gt;)&lt;/code&gt; 之前都不能有空格,传入的参数列表的逗号前不能有空格,逗号后要加一个空格
比如:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$arg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$arg2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$arg3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;传入的参数列表可以分开多行书写,每行都要有一个单位的缩进,而且每行都只能有一个参数
比如:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$longArgument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$longerArgument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$muchLongerArgument&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;控制语句&lt;/h3&gt;

&lt;p&gt;通常控制语句的规范有以下几点:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;控制语句的关键词后面一定要加上一个空格&lt;/li&gt;
&lt;li&gt;开括号 &lt;code&gt;(&lt;/code&gt; 后面一定不能加空格&lt;/li&gt;
&lt;li&gt;闭括号 &lt;code&gt;)&lt;/code&gt; 前面一定不能加空格&lt;/li&gt;
&lt;li&gt;闭小括号 &lt;code&gt;)&lt;/code&gt; 和开大括号 &lt;code&gt;{&lt;/code&gt; 之间一定要有一个空格&lt;/li&gt;
&lt;li&gt;控制结构内的语句一定要有一个单位的缩进&lt;/li&gt;
&lt;li&gt;闭括号 &lt;code&gt;}&lt;/code&gt; 一定要另开一行&lt;/li&gt;
&lt;li&gt;&lt;p&gt;控制结构的语句块必须以闭括号 &lt;code&gt;}&lt;/code&gt; 进行闭合&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;if,elseif和else语句&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$expr1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// if body&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;elseif&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$expr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// elseif body&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// else body;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用else if的时候应该要用 &lt;code&gt;elseif&lt;/code&gt; 语句,而不是 &lt;code&gt;else if&lt;/code&gt; 语句,这样看起来所有的控制语句都是一个单词&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;switch,case语句&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;First case, with a break&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Second case, which falls through&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// no break&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Third case, return instead of break&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Default case&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;case&lt;/code&gt; 语句相对于 &lt;code&gt;switch&lt;/code&gt; 语句一定要有一个单位的缩进,而 &lt;code&gt;break&lt;/code&gt; 语句相对于同级的 &lt;code&gt;case&lt;/code&gt; 语句要有一个单位的缩进&lt;/p&gt;

&lt;p&gt;如果希望一个运行逻辑匹配多个 &lt;code&gt;case&lt;/code&gt; 语句,那么要在第一个落空的 &lt;code&gt;case&lt;/code&gt; 语句中加上 &lt;code&gt;//no break&lt;/code&gt; 的注释&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;while,do while&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// structure body&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// structure body;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;for&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// for body&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;foreach&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$iterable&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// foreach body&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;try, catch&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// try body&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FirstExceptionType&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// catch body&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;OtherExceptionType&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// catch body&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;闭包&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;function&lt;/code&gt; 关键词后要加上一个空格, &lt;code&gt;use&lt;/code&gt; 关键词前后都要加上一个空格&lt;/p&gt;

&lt;p&gt;开括号 &lt;code&gt;{&lt;/code&gt; 必须在声明语句的同一行,闭括号 &lt;code&gt;}&lt;/code&gt; 必须在函数语句块的下一行&lt;/p&gt;

&lt;p&gt;参数列表中的逗号前不要加空格, 逗号后要加一个空格&lt;/p&gt;

&lt;p&gt;举个闭包函数的声明例子:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$closureWithArgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$arg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$arg2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// body&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$closureWithArgsAndVars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$arg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$arg2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$var2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// body&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数列表可以分开到多行,每一行都要有一个单位的缩进,而且一行只能有一个参数&lt;/p&gt;

&lt;p&gt;当参数列表分开到多行的时候,闭括号 &lt;code&gt;)&lt;/code&gt; 和开括号 &lt;code&gt;{&lt;/code&gt; 应该写在同一行,而且它们之间要用一个空格分开
比如:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$longArgs_noVars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$longArgument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$longerArgument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$muchLongerArgument&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// body&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$noArgs_longVars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$longVar1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$longerVar2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$muchLongerVar3&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// body&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$longArgs_longVars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$longArgument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$longerArgument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$muchLongerArgument&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$longVar1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$longerVar2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$muchLongerVar3&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// body&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$longArgs_shortVars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$longArgument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$longerArgument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$muchLongerArgument&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// body&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$shortArgs_longVars&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$longVar1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$longerVar2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$muchLongerVar3&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;c1&quot;&gt;// body&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上的准则对于闭包函数作为其他函数或者方法的参数的时候依然有效:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$arg1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$arg2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$var1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// body&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$arg3&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;总结&lt;/h3&gt;

&lt;p&gt;依然有很多PHP编码的风格和实践没有包含到这个规范中,这些风格包含但不限于:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;常量(contants)和全局变量(global variables)的声明&lt;/li&gt;
&lt;li&gt;函数的声明&lt;/li&gt;
&lt;li&gt;运算符和赋值&lt;/li&gt;
&lt;li&gt;行内对齐&lt;/li&gt;
&lt;li&gt;注释和文档块&lt;/li&gt;
&lt;li&gt;类名的前缀和后缀&lt;/li&gt;
&lt;li&gt;一些好的实践&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以后会对规范进行修正和扩展.&lt;/p&gt;
</description>
        <pubDate>Mon, 02 May 2016 00:00:00 +0800</pubDate>
      </item>
    
      <item>
        <title>【PHP-FIG】系列-PSR4自动加载</title>
        <link>http://blog.nuttopan.cn/blog/psr-4/</link>
        <guid isPermaLink="true">http://blog.nuttopan.cn/blog/psr-4/</guid>
        <description>&lt;p&gt;以前写PHP的类的时候我们要一个类封装成一个文件,然后使用的时候要写一大串的include语句,PHP5以后允许我们通过命名空间和类名对类和文件的自动加载,实在大大简化了我们编程.但是我们要遵循一些命名空间和类名的规范,才能更加优雅和通俗地使用这个自动加载的特性.&lt;/p&gt;

&lt;h2&gt;概述&lt;/h2&gt;

&lt;p&gt;PSR-4规范了如何通过命名空间和类名自动加载文件系统中某个路径的PHP类文件对于自动加载这个话题PSR有另外一个版本:&lt;a href=&quot;https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md&quot;&gt;PSR-0&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;具体说明&lt;/h2&gt;

&lt;p&gt;1, 类(class)是类(classes),接口(interfaces),特性(traits)和其他同一结构的统称.&lt;/p&gt;

&lt;p&gt;2, 规范的完整类名应该是以下的形式:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span class=&quot;x&quot;&gt;\&amp;lt;NamespaceName&amp;gt;(\&amp;lt;SubNamespaceNames&amp;gt;)*\&amp;lt;ClassName&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;必须要有顶级(top-level)命名空间名,亦称为发布者命名空间&lt;/li&gt;
&lt;li&gt;应该包含一个或多个的子命名空间名&lt;/li&gt;
&lt;li&gt;必须要以类名作为整个完整类名的结束&lt;/li&gt;
&lt;li&gt;下横线在完整类名的任何部分都不存在特殊的意义&lt;/li&gt;
&lt;li&gt;完整类名可以是各种字符数字的大小写组合&lt;/li&gt;
&lt;li&gt;类名必须是大小写敏感的&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;3, 当通过规范的完整类名加载文件的时候应该遵从的规范&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;完整类名中不包括顶级命名空间的分隔符的顶级和子命名空间(被视作命名空间前缀)对应至少一个根目录&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;比如&lt;code&gt;\Acme\Log\Writer\File_Writer&lt;/code&gt;的命名空间前缀为&lt;code&gt;Acme\Log\Writer&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;命名空间前缀对应的就是该根目录下的子目录,命名空间的分隔符就是目录的分隔符,注意:命名空间名和子目录名一定要大小写完全匹配.&lt;/li&gt;
&lt;li&gt;最后的类名对应的就是目录下与类名大小写完全一致的&lt;code&gt;.php&lt;/code&gt;文件了&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;4, 实现自动加载的自动加载器绝对不能抛出异常和引发任何等级的错误,也不应该返回任何值&lt;/p&gt;

&lt;h2&gt;例子&lt;/h2&gt;

&lt;p&gt;例子可以参考:&lt;a href=&quot;http://www.php-fig.org/psr/psr-4/#3-examples&quot;&gt;PSR4-examples&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.php-fig.org/psr/psr-4/&quot;&gt;PSR-4&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 26 Apr 2016 00:00:00 +0800</pubDate>
      </item>
    
      <item>
        <title>【PHP-FIG】系列-PSR1基础编码规范</title>
        <link>http://blog.nuttopan.cn/blog/psr-1/</link>
        <guid isPermaLink="true">http://blog.nuttopan.cn/blog/psr-1/</guid>
        <description>&lt;p&gt;&lt;a href=&quot;http://www.php-fig.org/&quot;&gt;PSR(PHP Standards Recommendations)&lt;/a&gt;对PHP的语言书写提出了很多很好的建议规范,遵从这些规范,对代码的美观和传播交流都有积极的作用.我在学习的同时都将概述和总结翻译出来,可以作为日后的参考.&lt;/p&gt;

&lt;h2&gt;概述&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;只使用&lt;code&gt;&amp;lt;?php&lt;/code&gt;和&lt;code&gt;&amp;lt;?=&lt;/code&gt;作为开始标签.不要使用&lt;code&gt;&amp;lt;?&lt;/code&gt;标签,因为这个标签要&lt;a href=&quot;http://php.net/manual/en/language.basic-syntax.phptags.php&quot;&gt;PHP配置中开启对应的支持&lt;/a&gt;才会生效.&lt;/li&gt;
&lt;li&gt;PHP的源文件都必须使用不带BOM的UTF-8字符编码.&lt;/li&gt;
&lt;li&gt;同一个PHP的文件要不就只负责进行定义(类, 函数, 静态变量等),要不就只负责产生结果(比如产生输出, 改变&lt;code&gt;.ini&lt;/code&gt;文件等),不应该两个事情一起做.&lt;/li&gt;
&lt;li&gt;命名空间(Namespaces)和类名(classes)的定义必须遵循PSR的自动加载规范[&lt;a href=&quot;https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md&quot;&gt;PSR-0&lt;/a&gt;, &lt;a href=&quot;https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md&quot;&gt;PSR-4&lt;/a&gt;]&lt;/li&gt;
&lt;li&gt;类名必须使用大驼峰写法(StudlyCaps)&lt;/li&gt;
&lt;li&gt;类中的静态变量必须用全大写(UPPER_CASE)单词以下横线分开&lt;/li&gt;
&lt;li&gt;方法名必须使用小驼峰写法(camelCase)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;规范的详细说明&lt;/h2&gt;

&lt;p&gt;详细说明可以参照&lt;a href=&quot;http://www.php-fig.org/psr/psr-1/&quot;&gt;PSR-1&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.php-fig.org/psr/psr-1/&quot;&gt;PSR-1&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 26 Apr 2016 00:00:00 +0800</pubDate>
      </item>
    
      <item>
        <title>关于字符编码的笔记</title>
        <link>http://blog.nuttopan.cn/blog/note-about-character-set/</link>
        <guid isPermaLink="true">http://blog.nuttopan.cn/blog/note-about-character-set/</guid>
        <description>&lt;p&gt;一直都有接触到关于字符编码的种种讨论,很多时候都是龙头蛇尾地看了一截就没有继续了解,所以头脑总是有一些模糊和不了解的地方,最近有空搜刮了一些介绍,最后读到&lt;a href=&quot;http://www.joelonsoftware.com/articles/Unicode.html&quot;&gt;Joel Spolsky关于字符集&lt;/a&gt;的介绍终于豁然开朗,后面我根据文章内容归纳一些重点.&lt;/p&gt;

&lt;h2&gt;当然从历史讲起&lt;/h2&gt;

&lt;p&gt;很多现在看起来复杂的东西最初都是开始于一个简单事物或者构想,字符编码也是这样,最初的字符编码就是字符到字符编码的映射,随着历史的发展,由于一些历史的原因和使用的需要,字符的编码的方式和形式都出现了不同的变化,但是终究逃脱不了映射的目的,只是中间的过程变得更加的复杂.&lt;/p&gt;

&lt;h3&gt;ASCII年代&lt;/h3&gt;

&lt;p&gt;ASCII(American Standard Code for Information Interchange)在电脑使用者还是以英语作为母语的使用者为主体的时候,作为编码是没有痛感,它规定了前0~127个字符和编码的对应关系,而对后面128个字符的对应关系没有做说明.前128个字符已经很好地包含了英语使用者的大部分需求.&lt;/p&gt;

&lt;h3&gt;OEM年代&lt;/h3&gt;

&lt;p&gt;当电脑开始全球化,作为其他国家的使用工具的时候,无可避免的都会面临一个编码的问题,毕竟ASCII只能覆盖大部分英语的使用者需求,一些欧洲的字符,更有甚者像中国的文字有上万的字符等等都没有容身之所,于是有人就打起了ASCII的后128位字符映射的编码,将他进行进一步的扩展以适应当地的字符使用习惯,这样看起来好像也是无可厚非.但是问题就在于不同的国家不同的人都共同使用这后128位的编码,就会造成编码的冲突,比如对于130这个编码的字符映射不同的国家不同的人会有不同的解析,这样会导致一个地方的文档传到另外一个地方有可能就变得完全不可读.使用ASCII后128位进行扩展的比较出名的字符集就是IBM发布的OEM字符集.&lt;/p&gt;

&lt;h3&gt;ANSI年代&lt;/h3&gt;

&lt;p&gt;如果还是如此各执己见的话,势必会导致字符集间很多的不兼容,对于消息和信息的传播极为不利,这样就有点通天塔的讽刺意味了.这时候ANSI(American National Standards Institute)出面制止了纷争,统一了大家对ASCII后128为的解析.ANSI规定了ASCII后128位做各自字符映射,可以单个字节映射一个字符,也可以多个字节映射一个字符,对于这样的一个映射集合就叫一个代码页.这样不同的国家和地区维持好自己的代码页就可以解决各自的字符处理需求,比如中国的GB2312标准就就是一个双字节表示一个字符的解析标准,汉字 &amp;#39;中&amp;#39; 在中文操作系统,使用0xD6,0xD0这两个字节存储.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;但是,这样就导致了一个致命的问题,通常不同代码页的字符不能在同一个文档出现,否则就会出现解析错误&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;Unicode年代&lt;/h3&gt;

&lt;p&gt;ANSI的弊病大家都意识到了,所以根本的原因就是我们必须要对我们的所有字符有统一的编号,说的是编号是因为Unicode的编号和编码是分离的(而以上的方法编码和编号都是一样的),字符都有统一的Unicode编号,但是最后的编码结果是和我们的编码方式相关的,比如比较出名的编码方式有UTF-8和UTF-16.Unicode统一了所有字符的编码之后,我们只需要通过一定的编码方式编码,使用的时候再用对应的解码方式解码,就能够获取到世界上所有的语言的字符,真正实现字符的大一统.&lt;/p&gt;

&lt;h2&gt;一些值得关注的要点&lt;/h2&gt;

&lt;h3&gt;BOM&lt;/h3&gt;

&lt;p&gt;BOM是Byte Order Mark,他的存在是因为一个计算机由来已久的存储问题,多字节存储的时候我们应该是大端放前(high-endian)还是小端放前(low-endian)的问题.它通过在文本的头加上FF FE或FE FF来指明文本的内容是大端还是小端的.但是要注意的是一些编辑器和编译器是不会做大小端的监测的,比如PHP,如果在文本放上BOM编译器会认为他是一个文本.&lt;/p&gt;

&lt;h3&gt;编码与解码&lt;/h3&gt;

&lt;p&gt;对于解码,有一个重要的原则:&lt;strong&gt;解码前我们必须知道这个文本是用什么方式编码的.&lt;/strong&gt;这个很重要否则我们很难找到合适的方式去解码.&lt;/p&gt;

&lt;h2&gt;参考&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.joelonsoftware.com/articles/Unicode.html&quot;&gt;http://www.joelonsoftware.com/articles/Unicode.html&lt;/a&gt;
&lt;a href=&quot;http://www.imkevinyang.com/2010/06/%E5%85%B3%E4%BA%8E%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%EF%BC%8C%E4%BD%A0%E6%89%80%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84.html&quot;&gt;http://www.imkevinyang.com/2010/06/%E5%85%B3%E4%BA%8E%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%EF%BC%8C%E4%BD%A0%E6%89%80%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84.html&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 25 Apr 2016 00:00:00 +0800</pubDate>
      </item>
    
      <item>
        <title>使用GitHub Page搭建博客手记</title>
        <link>http://blog.nuttopan.cn/blog/create-my-own-github-page/</link>
        <guid isPermaLink="true">http://blog.nuttopan.cn/blog/create-my-own-github-page/</guid>
        <description>&lt;p&gt;经过一些摸索,利用GitHub Page搭建了这个博客,期间记录了一些笔记,现在整理一下希望以后有个借鉴.&lt;/p&gt;

&lt;h2&gt;搭建静态的GitHub Page&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;参考: &lt;a href=&quot;https://pages.github.com/&quot;&gt;https://pages.github.com/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;GitHub为了能让他人快速了解你个人,组织或项目,允许你对他们建立对应的Page.我们可以利用这个Page,建立自己的博客.&lt;/p&gt;

&lt;p&gt;流程十分简单:&lt;/p&gt;

&lt;p&gt;1, &lt;strong&gt;在自己仓库中开一个以&lt;em&gt;用户名.github.io&lt;/em&gt;命名的仓库&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;比如我的用户名是&lt;em&gt;nutto&lt;/em&gt;,存放我个人Page的仓库就叫&lt;em&gt;nutto.github.io&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;2, &lt;strong&gt;使用clone命令将新建的仓库clone到本地&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git clone https://github.com/username/username.github.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3, &lt;strong&gt;在项目内创建index.html文件&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;username.github.io
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt; &amp;gt; index.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4, &lt;strong&gt;将项目内的修改推到GitHub中&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git add --all
git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;Initial commit&amp;quot;&lt;/span&gt;
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5, &lt;strong&gt;然后我们就可以通过访问&lt;em&gt;http://username.github.io&lt;/em&gt;来访问我们刚新建的index页面了&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我的主页是: &lt;a href=&quot;http://nutto.github.io&quot;&gt;http://nutto.github.io&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2&gt;使用Jekyll搭建更加灵活的博客&lt;/h2&gt;

&lt;p&gt;GitHub中的Page只允许静态的页面展示,如果每次写博客都要写HTML,更糟糕的还有可能要写CSS样式.这样肯定要疯掉的.作为blogger我当然希望只关心内容的撰写,最好可以使用Markdown,代码和排版不要太难看其实都已经心满意足了.&lt;/p&gt;

&lt;p&gt;幸好我们可以使用静态页面生成工具&lt;a href=&quot;https://jekyllrb.com/docs/quickstart/&quot;&gt;Jekyll&lt;/a&gt;.开始时我们可以使用它设置好页面模版,从此以后专心撰写博客就可以了,更加好的是他能支持Markdown渲染和代码高亮等的功能,有很多地方做的比我想的更加好,简直就是天赐福音.&lt;/p&gt;

&lt;h3&gt;安装Jekyll&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;来源: &lt;a href=&quot;http://jekyll-windows.juthilo.com/&quot;&gt;http://jekyll-windows.juthilo.com/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Jekyll是使用Ruby写的,这就是说我们要使用它就要先安装Ruby和它配套的工具.而且可惜的是Jekyll并不官方支持Win(在开源的世界Linux总是会比Win方便得多),但是也是有工具能让Jekyll在Win中运行的.Linux的安装方法在&lt;a href=&quot;https://jekyllrb.com/docs/installation/&quot;&gt;Jekyll主页&lt;/a&gt;中都有详细的描述,而且本人的机子用Win,所以还是说说Win下的安装流程吧.&lt;/p&gt;

&lt;h4&gt;安装运行Jekyll的环境&lt;/h4&gt;

&lt;p&gt;1, &lt;strong&gt;到http://rubyinstaller.org/downloads/中寻找适合的安装包安装Ruby&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;注意安装的时候要勾选&lt;em&gt;Add Ruby executables to your PATH&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7xtbqv.com2.z0.glb.clouddn.com/ruby-path.png&quot; alt=&quot;Add Ruby executables to your PATH&quot;&gt;&lt;/p&gt;

&lt;p&gt;2,&lt;strong&gt;到http://rubyinstaller.org/downloads/中下载适合的RubyDevKit压缩包&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这个RubyDevKit为Win下的Ruby提供了额外的一些工具,我们下载压缩包后将它解压,然后进入到目录下面运行&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ruby dk.rb init
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后安装&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ruby dk.rb install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就完成了&lt;/p&gt;

&lt;h4&gt;安装Jekyll&lt;/h4&gt;

&lt;p&gt;话说环境安装好之后安装Jekyll是很简单的事情,运行&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gem install jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;理论上就能顺利安装了&lt;/p&gt;

&lt;p&gt;但是由于国家的特殊国情我们总是会读取不到rubygems.org的资源文件,这样的话我们有几个选择&lt;/p&gt;

&lt;p&gt;1, &lt;strong&gt;使用国内的镜像&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;国内的比较有名的镜像&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ruby.taobao.org/&quot;&gt;https://ruby.taobao.org/&lt;/a&gt;   ---貌似已经停止维护了&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://gems.ruby-china.org/&quot;&gt;http://gems.ruby-china.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2, &lt;strong&gt;使用VPN&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这个就比较简单了,但是总是觉得VPN不太优雅,一旦开启整个网络环境都改变了,访问个国内网站还要绕个圈.&lt;/p&gt;

&lt;p&gt;3, &lt;strong&gt;使用SSH&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对于应付特殊国情我觉得这个方法是比较优雅的了, 因为控制的粒度可以达到每个访问&lt;/p&gt;

&lt;p&gt;回到正题,开启SSH后我们可以使用命令&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;http_proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;http://user:password@proxy_ip:port

gem install jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;来安装Jekyll&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;参考: &lt;a href=&quot;https://github.com/rubygems/rubygems/issues/1068#issuecomment-63629560&quot;&gt;https://github.com/rubygems/rubygems/issues/1068#issuecomment-63629560&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4&gt;快速使用Jekyll&lt;/h4&gt;

&lt;p&gt;新建一个Jekyll项目&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;jekyll new myblog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;进入项目目录并启动渲染&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;myblog

jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;jekyll serve&lt;/code&gt;会对项目进行监听和渲染,如果我们想单纯地渲染项目可以使用&lt;code&gt;jekyll build&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Jekyll使用的是&lt;a href=&quot;https://github.com/Shopify/liquid/wiki&quot;&gt;Liquid&lt;/a&gt;模版引擎,灵活使用可以做出很多好看的博客模版
Jekyll的具体用法和配置还有很多不是三言两语就可以说得完的,具体可以参照&lt;a href=&quot;https://jekyllrb.com/docs/home/&quot;&gt;https://jekyllrb.com/docs/home/&lt;/a&gt;进行实践&lt;/p&gt;

&lt;h2&gt;博客的进阶&lt;/h2&gt;

&lt;h3&gt;自定义博客的URL&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;参考: &lt;a href=&quot;https://help.github.com/articles/quick-start-setting-up-a-custom-domain/&quot;&gt;https://help.github.com/articles/quick-start-setting-up-a-custom-domain/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;按照上述流程搭建起GitHub Page博客的URL都是固定的:&lt;strong&gt;username.github.io&lt;/strong&gt;,这样对于希望个性化的人来说这样肯定不太好,所以GitHub也允许其他域名的别名指向,我们在自己的域名管理商中做一个别名指向到GitHub Page博客中,然后在GitHub Page的项目根目录中添加一个&lt;code&gt;CNAME&lt;/code&gt;文件,内容为自定义的博客域名.&lt;/p&gt;

&lt;p&gt;比如我在域名管理商中做了 &lt;code&gt;blog.nuttopan.cn CNAME to nutto.github.io&lt;/code&gt;的指向&lt;/p&gt;

&lt;p&gt;然后我在CNAME文件中填写&lt;code&gt;blog.nuttopan.cn&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;我就可以在http://blog.nuttopan.cn访问我的博客了&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意: CNAME文件中如果填写多个域名,GitHub只会解释到第一个域名&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;使用更加漂亮的Jekyll模版&lt;/h3&gt;

&lt;p&gt;如果有时间打造自己的Jekyll模版那当然是一件好事,但是绝大多数的人都没有时间去自己打造自己的Jekyll模版(特别是要做得漂亮),那么我们可以善用别人的轮子,在&lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;http://jekyllthemes.org/&lt;/a&gt;中有很多漂亮的Jekyll模版,我们可以直接使用,最好还是要注明一下模版的作者,支持一下模版作者的开源工作.&lt;/p&gt;

&lt;h3&gt;使用Google的工具对博客进行监控&lt;/h3&gt;

&lt;p&gt;对于网站的监控,我还是比较喜欢使用Google的工具,文档齐全还可以有课程和资料参考,我通常使用&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.google.com/webmasters/&quot;&gt;Google Search Console&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;analytics.google.com&quot;&gt;Google Analytics&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;都是可以按照网站步骤注册使用,然后在网页提示中不断学习.&lt;/p&gt;

&lt;h3&gt;为博客加入评论功能&lt;/h3&gt;

&lt;p&gt;GitHub Page的评论解决方案有很多,我的网站使用的是&lt;a href=&quot;https://disqus.com/&quot;&gt;disqus&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;基本的操作都是注册使用,然后贴控件代码就可以了.&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Apr 2016 00:00:00 +0800</pubDate>
      </item>
    
  </channel>
</rss>
